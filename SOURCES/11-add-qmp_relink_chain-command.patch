Add qmp_relink_chain command

From: Tim Smith <tim.smith@citrix.com>


---
 block.c                 |   12 +++++
 blockdev.c              |  110 +++++++++++++++++++++++++++++++++++++++++++++++
 dp-qapi/block-core.json |   51 ++++++++++++++++++++++
 include/block/block.h   |    5 ++
 4 files changed, 177 insertions(+), 1 deletion(-)

diff --git a/block.c b/block.c
index 480345bcdc..c212741860 100644
--- a/block.c
+++ b/block.c
@@ -3699,8 +3699,18 @@ BlockDriverState *bdrv_find_base(BlockDriverState *bs)
  *  if active == top, that is considered an error
  *
  */
+#ifdef CONFIG_QEMUDP
 int bdrv_drop_intermediate(BlockDriverState *top, BlockDriverState *base,
                            const char *backing_file_str)
+{
+    return bdrv_drop_intermediate_clear(top, base, backing_file_str, false);
+}
+int bdrv_drop_intermediate_clear(BlockDriverState *top, BlockDriverState *base,
+                           const char *backing_file_str, bool in_relink_chain)
+#else
+int bdrv_drop_intermediate(BlockDriverState *top, BlockDriverState *base,
+                           const char *backing_file_str)
+#endif
 {
     BdrvChild *c, *next;
     Error *local_err = NULL;
@@ -3735,7 +3745,7 @@ int bdrv_drop_intermediate(BlockDriverState *top, BlockDriverState *base,
         }
 
         /* If so, update the backing file path in the image file */
-        if (c->role->update_filename) {
+        if (!in_relink_chain && c->role->update_filename) {
             ret = c->role->update_filename(c, base, backing_file_str,
                                            &local_err);
             if (ret < 0) {
diff --git a/blockdev.c b/blockdev.c
index c66b62da14..e26c1e4e04 100644
--- a/blockdev.c
+++ b/blockdev.c
@@ -4302,6 +4302,116 @@ void qmp_x_block_latency_histogram_set(
     }
 }
 
+#ifdef CONFIG_QEMUDP
+void qmp_relink_chain(const char *device,
+                      const char *top,
+                      bool has_base, const char *base,
+                      Error **errp)
+{
+    BlockDriverState *active_bs = NULL;
+    BlockDriverState *top_bs = NULL, *top_bs_child = NULL;
+    BlockDriverState *base_bs = NULL, *new_base_bs = NULL;
+    QDict *new_base_bs_options = NULL;
+    AioContext *aio_context = NULL;
+    bool top_bs_child_ro = false;
+    Error *local_err = NULL;
+
+    /* Find the root bs for the device. Vital for error checking */
+    active_bs = qmp_get_root_bs(device, &local_err);
+    if (!active_bs) {
+        active_bs = bdrv_lookup_bs(device, device, NULL);
+        if (!active_bs) {
+            error_free(local_err);
+            error_set(errp, ERROR_CLASS_DEVICE_NOT_FOUND,
+                      "Device '%s' not found", device);
+        } else {
+            error_propagate(errp, local_err);
+        }
+        return;
+    }
+
+    aio_context = bdrv_get_aio_context(active_bs);
+    aio_context_acquire(aio_context);
+
+    /* Find the top_bs from the active layer */
+    top_bs = bdrv_find_backing_image(active_bs, top);
+    if (top_bs == NULL) {
+        error_setg(errp, "Top image file '%s' not found in image chain for device '%s'", top, device);
+        goto out;
+    }
+    assert(bdrv_get_aio_context(top_bs) == aio_context);
+
+    if (has_base && base) {
+        base_bs = bdrv_find_backing_image(top_bs, base);
+        if (base_bs == NULL) {
+            error_setg(errp, "Base image file '%s' not found in image chain for top '%s'", base, top_bs->filename);
+            goto out;
+        }
+    } else {
+        base_bs = bdrv_find_base(top_bs);
+    }
+    assert(bdrv_get_aio_context(base_bs) == aio_context);
+
+    top_bs_child = bdrv_find_overlay(active_bs, top_bs);
+    if (top_bs_child == NULL) {
+        error_setg(errp, "'top' image '%s' has no children", top_bs->filename);
+        goto out;
+    }
+
+    /* Take steps to ensure that all I/O has finished. This code
+     * is modelled on bdrv_set_aio_context() */
+    aio_disable_external(aio_context);
+    bdrv_parent_drained_begin(active_bs, NULL);
+    bdrv_drain(active_bs); /* ensure there are no in-flight requests */
+    while (aio_poll(aio_context, false)) {
+        /* wait for all bottom halves to execute */
+    }
+
+    /* Now everything should be quiet, open a brand new base_bs with the same
+     * flags as the original base_bs */
+    local_err = NULL;
+    new_base_bs_options = qdict_clone_shallow(base_bs->explicit_options);
+    new_base_bs = bdrv_open(base_bs->filename, NULL, new_base_bs_options, base_bs->open_flags, &local_err);
+    if (new_base_bs == NULL) {
+        error_propagate(errp, local_err);
+        goto out_drain;
+    }
+    /* Replace the previous base_bs with the new one */
+    local_err = NULL;
+    bdrv_replace_node(base_bs, new_base_bs, &local_err);
+    /* bdrv_open() created a bs with a reference count of 1. Then bdrv_replace_node()
+     * takes another reference. So we need to drop one reference here or we will not
+     * get freed properly when the time comes. */
+    bdrv_unref(new_base_bs);
+    /* Make sure the new_base_bs has the correct aio_context */
+    bdrv_attach_aio_context(new_base_bs, aio_context);
+    base_bs = new_base_bs;
+
+    /* Before calling bdrv_drop_intermediate(), we must ensure that the parent of
+     * top_bs is open read/write so that its backing file name can be updated. */
+    if (!(top_bs_child->open_flags & BDRV_O_RDWR)) {
+        top_bs_child_ro = true;
+        bdrv_reopen(top_bs_child, top_bs_child->open_flags | BDRV_O_RDWR, NULL);
+    }
+    /* Call our new, special version of bdrv_drop_intermediate(), which takes
+     * an extra argument telling it to clear the parents list of the base.
+     * We need this to avoid a race where we could get confused on a later relink
+     * when the internals haven't cleaned up yet but the external commit
+     * code has removed the file on disk, eventually resulting in a segfault
+     * in the QCOW2 cache cleaner */
+    bdrv_drop_intermediate_clear(top_bs, base_bs, NULL, true);
+
+    if (top_bs_child_ro) {
+        bdrv_reopen(top_bs_child, top_bs_child->open_flags & ~BDRV_O_RDWR, NULL);
+    }
+
+out_drain:
+    bdrv_parent_drained_end(active_bs, NULL);
+out:
+    aio_context_release(aio_context);
+}
+#endif
+
 QemuOptsList qemu_common_drive_opts = {
     .name = "drive",
     .head = QTAILQ_HEAD_INITIALIZER(qemu_common_drive_opts.head),
diff --git a/dp-qapi/block-core.json b/dp-qapi/block-core.json
index c50517bff3..8f3fb84354 100644
--- a/dp-qapi/block-core.json
+++ b/dp-qapi/block-core.json
@@ -4784,3 +4784,54 @@
   'data' : { 'node-name': 'str',
              'iothread': 'StrOrNull',
              '*force': 'bool' } }
+
+##
+# @relink-chain:
+#
+# Relink the image chain after an external commit operation has written
+# data between 'top' and 'base' into 'base' - i.e.. makes the parent of
+# 'top' point to 'base' as its backing file.
+#
+# Unlike @change-backing-file, this will effect a modification of the live
+# image chain. It will create a newly-opened 'base' which it will swap into the
+# image chain to replace the original, which will force a re-read of some
+# internal state which might have been changed by the external commit.
+#
+# Use of external commit comes with significant health warnings, since it will
+# race with the live datapath and block drivers are not written to support this
+# sort of thing. In particular, with QCOW2, if the external commit
+# causes the base image to grow beyond ((cluster_size/8)^2)*cluster_size, then
+# the l1 table will grow beyond 1 cluster in size, and move within the file
+# (because it must be in contiguous clusters), with Unpredictable Results.
+#
+# It is also vitally important that relink-chain is only used on completely
+# straight chains. It will ruin the internal state of anything else.
+#
+# @device:  the device name or node-name of a root node
+#
+# @base:   The file name of the backing image which will become the backing image
+#          for the parent of 'top'. If not specified, this is the deepest backing
+#          image.
+#
+# @top:    The file name of the first image whose backing images have been committed
+#          down into 'base', i.e. the highest image to be removed. it is an error
+#          for this to be the active layer.
+#
+# Returns: Nothing on success
+#          If @device does not exist, DeviceNotFound
+#          If image commit is not supported by this device, NotSupported
+#          If @base or @top is invalid, a generic error is returned
+#
+# Since: CitrixInternal
+#
+# Example:
+#
+# -> { "execute": "relink-chain",
+#      "arguments": { "device": "virtio0",
+#                     "top": "/tmp/snap1.qcow2" } }
+# <- { "return": {} }
+#
+##
+{ 'command': 'relink-chain',
+  'data': { 'device': 'str', 'top': 'str', '*base': 'str'  } }
+
diff --git a/include/block/block.h b/include/block/block.h
index 43bb3408e7..c44d760578 100644
--- a/include/block/block.h
+++ b/include/block/block.h
@@ -310,6 +310,10 @@ int bdrv_commit(BlockDriverState *bs);
 int bdrv_change_backing_file(BlockDriverState *bs,
     const char *backing_file, const char *backing_fmt);
 void bdrv_register(BlockDriver *bdrv);
+#ifdef CONFIG_QEMUDP
+int bdrv_drop_intermediate_clear(BlockDriverState *top, BlockDriverState *base,
+                           const char *backing_file_str, bool in_relink_chain);
+#endif
 int bdrv_drop_intermediate(BlockDriverState *top, BlockDriverState *base,
                            const char *backing_file_str);
 BlockDriverState *bdrv_find_overlay(BlockDriverState *active,
@@ -612,5 +616,6 @@ void bdrv_unregister_buf(BlockDriverState *bs, void *host);
 void bdrv_replace_node_name(BlockDriverState *bs,
                            const char *node_name,
                            Error **errp);
+void bdrv_detach_all_parents(BlockDriverState *bs);
 #endif
 #endif
