Fix 'file and filename' error in relink-chain

From: Tim Smith <tim.smith@citrix.com>

Occasionally we get an error from the bdrv_open() call in
the QMP relink-chain command, originating in bdrv_fill_options()
and complaining that the 'file' argument has been supplied in
addition to the 'filename' option being set.

This occurs when bdrv_open_inherit() takes a code path which
results in bdrv_fill_options() being called twice on the same
options dictionary in a way it wasn't expecting. If we create
our own options dictionary we can avoid confusing bdrv_open().
---
 block.c                |    2 ++
 block/qcow2-cache.c    |    1 +
 block/qcow2-refcount.c |    4 ++--
 block/qcow2.c          |    4 ++++
 blockdev.c             |   21 ++++++++++++++++++---
 5 files changed, 27 insertions(+), 5 deletions(-)

diff --git a/block.c b/block.c
index 0d7199432d..86d16150bd 100644
--- a/block.c
+++ b/block.c
@@ -698,6 +698,8 @@ static int find_image_format(BlockBackend *file, const char *filename,
         return ret;
     }
 
+    /* blk_pread() does not necessarily fill the buffer */
+    memset(buf, 0, sizeof(buf));
     ret = blk_pread(file, 0, buf, sizeof(buf));
     if (ret < 0) {
         error_setg_errno(errp, -ret, "Could not read image for determining its "
diff --git a/block/qcow2-cache.c b/block/qcow2-cache.c
index d9dafa31e5..a62650f30e 100644
--- a/block/qcow2-cache.c
+++ b/block/qcow2-cache.c
@@ -145,6 +145,7 @@ Qcow2Cache *qcow2_cache_create(BlockDriverState *bs, int num_tables,
         c = NULL;
     }
 
+    memset(c->table_array, 0, (size_t) num_tables * c->table_size);
     return c;
 }
 
diff --git a/block/qcow2-refcount.c b/block/qcow2-refcount.c
index 6b8b63514a..a8f2c4d387 100644
--- a/block/qcow2-refcount.c
+++ b/block/qcow2-refcount.c
@@ -829,7 +829,7 @@ static int QEMU_WARN_UNUSED_RESULT update_refcount(BlockDriverState *bs,
         cluster_offset += s->cluster_size)
     {
         int block_index;
-        uint64_t refcount;
+        uint64_t refcount = 0;
         int64_t cluster_index = cluster_offset >> s->cluster_bits;
         int64_t table_index = cluster_index >> s->refcount_block_bits;
 
@@ -957,7 +957,7 @@ int qcow2_update_cluster_refcount(BlockDriverState *bs,
 static int64_t alloc_clusters_noref(BlockDriverState *bs, uint64_t size)
 {
     BDRVQcow2State *s = bs->opaque;
-    uint64_t i, nb_clusters, refcount;
+    uint64_t i, nb_clusters, refcount=0;
     int ret;
 
     /* We can't allocate clusters if they may still be queued for discard. */
diff --git a/block/qcow2.c b/block/qcow2.c
index 829241436a..82c276f0b2 100644
--- a/block/qcow2.c
+++ b/block/qcow2.c
@@ -727,6 +727,10 @@ static void cache_clean_timer_cb(void *opaque)
 {
     BlockDriverState *bs = opaque;
     BDRVQcow2State *s = bs->opaque;
+    if (s == NULL) {
+        printf("--> cache_clean_timer_cb(NULL STATE)\n");
+        return;
+    }
     qcow2_cache_clean_unused(s->l2_table_cache);
     qcow2_cache_clean_unused(s->refcount_block_cache);
     timer_mod(s->cache_clean_timer, qemu_clock_get_ms(CACHE_CLEAN_CLOCK) +
diff --git a/blockdev.c b/blockdev.c
index e26c1e4e04..538d685c63 100644
--- a/blockdev.c
+++ b/blockdev.c
@@ -4310,8 +4310,10 @@ void qmp_relink_chain(const char *device,
 {
     BlockDriverState *active_bs = NULL;
     BlockDriverState *top_bs = NULL, *top_bs_child = NULL;
-    BlockDriverState *base_bs = NULL, *new_base_bs = NULL;
+    BlockDriverState *base_bs = NULL;
+    BlockDriverState *new_base_bs = NULL;
     QDict *new_base_bs_options = NULL;
+    int new_base_bs_flags = 0;
     AioContext *aio_context = NULL;
     bool top_bs_child_ro = false;
     Error *local_err = NULL;
@@ -4370,8 +4372,21 @@ void qmp_relink_chain(const char *device,
     /* Now everything should be quiet, open a brand new base_bs with the same
      * flags as the original base_bs */
     local_err = NULL;
-    new_base_bs_options = qdict_clone_shallow(base_bs->explicit_options);
-    new_base_bs = bdrv_open(base_bs->filename, NULL, new_base_bs_options, base_bs->open_flags, &local_err);
+    /* The options should come from "explicit_options", because that's what was
+       passed in, before all the side_effects of bdrv_open() got to it. */
+    new_base_bs_options = qdict_new();
+    qdict_copy_default(new_base_bs_options, base_bs->explicit_options, BDRV_OPT_CACHE_NO_FLUSH);
+    qdict_copy_default(new_base_bs_options, base_bs->explicit_options, BDRV_OPT_CACHE_DIRECT);
+    qdict_copy_default(new_base_bs_options, base_bs->explicit_options, BDRV_OPT_READ_ONLY);
+    qdict_copy_default(new_base_bs_options, base_bs->explicit_options, BDRV_OPT_DISCARD);
+
+    /* Make sure the filename is in the new options */
+    qdict_put_str(new_base_bs_options, "file.driver", "file");
+    qdict_put_str(new_base_bs_options, "file.filename", base_bs->filename);
+    qdict_put_str(new_base_bs_options, "driver", "qcow2");
+
+    new_base_bs_flags = base_bs->open_flags;
+    new_base_bs = bdrv_open(NULL, NULL, new_base_bs_options, new_base_bs_flags, &local_err);
     if (new_base_bs == NULL) {
         error_propagate(errp, local_err);
         goto out_drain;
