Change the build configuration to decrease size and attack area

This is made up of:
* Removing support for various block device formats.
* Removing support for VFIO.
* Disabling many devices which are not needed/used.

diff --git a/backends/Makefile.objs b/backends/Makefile.objs
index 0400799..c54a903 100644
--- a/backends/Makefile.objs
+++ b/backends/Makefile.objs
@@ -6,5 +6,5 @@ common-obj-$(CONFIG_TPM) += tpm.o
 common-obj-y += hostmem.o hostmem-ram.o
 common-obj-$(CONFIG_LINUX) += hostmem-file.o
 
-common-obj-y += cryptodev.o
-common-obj-y += cryptodev-builtin.o
+common-obj-$(call lnot,$(CONFIG_XEN)) += cryptodev.o
+common-obj-$(call lnot,$(CONFIG_XEN)) += cryptodev-builtin.o
diff --git a/block/Makefile.objs b/block/Makefile.objs
index 2aaede4..13b0c75 100644
--- a/block/Makefile.objs
+++ b/block/Makefile.objs
@@ -1,10 +1,12 @@
-block-obj-y += raw-format.o qcow.o vdi.o vmdk.o cloop.o bochs.o vpc.o vvfat.o dmg.o
+block-obj-y += raw-format.o qcow.o vdi.o
+block-obj-$(call lnot,$(CONFIG_XEN)) += vmdk.o cloop.o bochs.o vpc.o vvfat.o dmg.o
 block-obj-y += qcow2.o qcow2-refcount.o qcow2-cluster.o qcow2-snapshot.o qcow2-cache.o qcow2-bitmap.o
 block-obj-y += qed.o qed-l2-cache.o qed-table.o qed-cluster.o
 block-obj-y += qed-check.o
-block-obj-y += vhdx.o vhdx-endian.o vhdx-log.o
+block-obj-$(call lnot,$(CONFIG_XEN)) += vhdx.o vhdx-endian.o vhdx-log.o
 block-obj-y += quorum.o
-block-obj-y += parallels.o blkdebug.o blkverify.o blkreplay.o
+block-obj-y += blkdebug.o blkverify.o blkreplay.o
+block-obj-$(call lnot,$(CONFIG_XEN)) += parallels.o
 block-obj-y += block-backend.o snapshot.o qapi.o
 block-obj-$(CONFIG_WIN32) += file-win32.o win32-aio.o
 block-obj-$(CONFIG_POSIX) += file-posix.o
@@ -12,7 +14,8 @@ block-obj-$(CONFIG_LINUX_AIO) += linux-aio.o
 block-obj-y += null.o mirror.o commit.o io.o
 block-obj-y += throttle-groups.o
 
-block-obj-y += nbd.o nbd-client.o sheepdog.o
+block-obj-$(call lnot,$(CONFIG_XEN)) += sheepdog.o
+block-obj-y += nbd.o nbd-client.o
 block-obj-$(CONFIG_LIBISCSI) += iscsi.o
 block-obj-$(if $(CONFIG_LIBISCSI),y,n) += iscsi-opts.o
 block-obj-$(CONFIG_LIBNFS) += nfs.o
diff --git a/crypto/Makefile.objs b/crypto/Makefile.objs
index 2b99e08..b505b64 100644
--- a/crypto/Makefile.objs
+++ b/crypto/Makefile.objs
@@ -38,3 +38,7 @@ crypto-obj-y += block-luks.o
 crypto-aes-obj-y = aes.o
 
 stub-obj-y += pbkdf-stub.o
+
+# Override the previous crypto-obj-y value to avoid building most crypto
+crypto-obj-y = hash.o
+crypto-obj-$(if $(CONFIG_NETTLE),n,$(if $(CONFIG_GCRYPT),n,y)) += hash-glib.o
diff --git a/default-configs/i386-softmmu.mak b/default-configs/i386-softmmu.mak
index d2ab2f6..0d73182 100644
--- a/default-configs/i386-softmmu.mak
+++ b/default-configs/i386-softmmu.mak
@@ -6,19 +6,19 @@ include usb.mak
 CONFIG_QXL=$(CONFIG_SPICE)
 CONFIG_VGA_ISA=y
 CONFIG_VGA_CIRRUS=y
-CONFIG_VMWARE_VGA=y
-CONFIG_VIRTIO_VGA=y
-CONFIG_VMMOUSE=y
-CONFIG_IPMI=y
-CONFIG_IPMI_LOCAL=y
-CONFIG_IPMI_EXTERN=y
-CONFIG_ISA_IPMI_KCS=y
-CONFIG_ISA_IPMI_BT=y
+CONFIG_VMWARE_VGA=n
+CONFIG_VIRTIO_VGA=n
+CONFIG_VMMOUSE=n
+CONFIG_IPMI=n
+CONFIG_IPMI_LOCAL=n
+CONFIG_IPMI_EXTERN=n
+CONFIG_ISA_IPMI_KCS=n
+CONFIG_ISA_IPMI_BT=n
 CONFIG_SERIAL=y
 CONFIG_SERIAL_ISA=y
 CONFIG_PARALLEL=y
 CONFIG_I8254=y
-CONFIG_PCSPK=y
+CONFIG_PCSPK=n
 CONFIG_PCKBD=y
 CONFIG_FDC=y
 CONFIG_ACPI=y
@@ -30,21 +30,21 @@ CONFIG_APM=y
 CONFIG_I8257=y
 CONFIG_IDE_ISA=y
 CONFIG_IDE_PIIX=y
-CONFIG_NE2000_ISA=y
-CONFIG_HPET=y
-CONFIG_APPLESMC=y
+CONFIG_NE2000_ISA=n
+CONFIG_HPET=n
+CONFIG_APPLESMC=n
 CONFIG_I8259=y
 CONFIG_PFLASH_CFI01=y
 CONFIG_TPM_TIS=$(CONFIG_TPM)
 CONFIG_MC146818RTC=y
 CONFIG_PCI_PIIX=y
-CONFIG_WDT_IB700=y
-CONFIG_ISA_DEBUG=y
-CONFIG_ISA_TESTDEV=y
-CONFIG_VMPORT=y
-CONFIG_SGA=y
+CONFIG_WDT_IB700=n
+CONFIG_ISA_DEBUG=n
+CONFIG_ISA_TESTDEV=n
+CONFIG_VMPORT=n
+CONFIG_SGA=n
 CONFIG_LPC_ICH9=y
-CONFIG_PCI_Q35=y
+CONFIG_PCI_Q35=n
 CONFIG_APIC=y
 CONFIG_IOAPIC=y
 CONFIG_PVPANIC=y
@@ -52,10 +52,10 @@ CONFIG_MEM_HOTPLUG=y
 CONFIG_NVDIMM=y
 CONFIG_ACPI_NVDIMM=y
 CONFIG_PCIE_PORT=y
-CONFIG_XIO3130=y
-CONFIG_IOH3420=y
-CONFIG_I82801B11=y
+CONFIG_XIO3130=n
+CONFIG_IOH3420=n
+CONFIG_I82801B11=n
 CONFIG_SMBIOS=y
 CONFIG_HYPERV_TESTDEV=$(CONFIG_KVM)
-CONFIG_PXB=y
+CONFIG_PXB=n
 CONFIG_ACPI_VMGENID=y
diff --git a/default-configs/pci.mak b/default-configs/pci.mak
index a758630..b337fe4 100644
--- a/default-configs/pci.mak
+++ b/default-configs/pci.mak
@@ -1,46 +1,46 @@
 CONFIG_PCI=y
 # For now, CONFIG_IDE_CORE requires ISA, so we enable it here
 CONFIG_ISA_BUS=y
-CONFIG_VIRTIO_PCI=y
-CONFIG_VIRTIO=y
+CONFIG_VIRTIO_PCI=n
+CONFIG_VIRTIO=n
 CONFIG_USB_UHCI=y
 CONFIG_USB_OHCI=y
 CONFIG_USB_EHCI=y
-CONFIG_USB_XHCI=y
-CONFIG_USB_XHCI_NEC=y
-CONFIG_NE2000_PCI=y
-CONFIG_EEPRO100_PCI=y
-CONFIG_PCNET_PCI=y
-CONFIG_PCNET_COMMON=y
-CONFIG_AC97=y
-CONFIG_HDA=y
-CONFIG_ES1370=y
-CONFIG_LSI_SCSI_PCI=y
-CONFIG_VMW_PVSCSI_SCSI_PCI=y
-CONFIG_MEGASAS_SCSI_PCI=y
-CONFIG_MPTSAS_SCSI_PCI=y
+CONFIG_USB_XHCI=n
+CONFIG_USB_XHCI_NEC=n
+CONFIG_NE2000_PCI=n
+CONFIG_EEPRO100_PCI=n
+CONFIG_PCNET_PCI=n
+CONFIG_PCNET_COMMON=n
+CONFIG_AC97=n
+CONFIG_HDA=n
+CONFIG_ES1370=n
+CONFIG_LSI_SCSI_PCI=n
+CONFIG_VMW_PVSCSI_SCSI_PCI=n
+CONFIG_MEGASAS_SCSI_PCI=n
+CONFIG_MPTSAS_SCSI_PCI=n
 CONFIG_RTL8139_PCI=y
 CONFIG_E1000_PCI=y
-CONFIG_E1000E_PCI=y
-CONFIG_VMXNET3_PCI=y
+CONFIG_E1000E_PCI=n
+CONFIG_VMXNET3_PCI=n
 CONFIG_IDE_CORE=y
 CONFIG_IDE_QDEV=y
 CONFIG_IDE_PCI=y
 CONFIG_AHCI=y
-CONFIG_ESP=y
-CONFIG_ESP_PCI=y
+CONFIG_ESP=n
+CONFIG_ESP_PCI=n
 CONFIG_SERIAL=y
 CONFIG_SERIAL_ISA=y
-CONFIG_SERIAL_PCI=y
-CONFIG_IPACK=y
-CONFIG_WDT_IB6300ESB=y
-CONFIG_PCI_TESTDEV=y
-CONFIG_NVME_PCI=y
-CONFIG_SD=y
-CONFIG_SDHCI=y
-CONFIG_EDU=y
+CONFIG_SERIAL_PCI=n
+CONFIG_IPACK=n
+CONFIG_WDT_IB6300ESB=n
+CONFIG_PCI_TESTDEV=n
+CONFIG_NVME_PCI=n
+CONFIG_SD=n
+CONFIG_SDHCI=n
+CONFIG_EDU=n
 CONFIG_VGA=y
 CONFIG_VGA_PCI=y
-CONFIG_IVSHMEM_DEVICE=$(CONFIG_IVSHMEM)
-CONFIG_ROCKER=y
+CONFIG_IVSHMEM_DEVICE=n
+CONFIG_ROCKER=n
 CONFIG_VHOST_USER_SCSI=$(and $(CONFIG_VHOST_USER),$(CONFIG_LINUX))
diff --git a/default-configs/sound.mak b/default-configs/sound.mak
index 4f22c34..55f64b8 100644
--- a/default-configs/sound.mak
+++ b/default-configs/sound.mak
@@ -1,4 +1,4 @@
-CONFIG_SB16=y
-CONFIG_ADLIB=y
-CONFIG_GUS=y
-CONFIG_CS4231A=y
+CONFIG_SB16=n
+CONFIG_ADLIB=n
+CONFIG_GUS=n
+CONFIG_CS4231A=n
diff --git a/default-configs/usb.mak b/default-configs/usb.mak
index f4b8568..7e52934 100644
--- a/default-configs/usb.mak
+++ b/default-configs/usb.mak
@@ -1,10 +1,10 @@
 CONFIG_USB=y
 CONFIG_USB_TABLET_WACOM=y
-CONFIG_USB_STORAGE_BOT=y
-CONFIG_USB_STORAGE_UAS=y
-CONFIG_USB_STORAGE_MTP=y
-CONFIG_USB_SMARTCARD=y
-CONFIG_USB_AUDIO=y
-CONFIG_USB_SERIAL=y
-CONFIG_USB_NETWORK=y
-CONFIG_USB_BLUETOOTH=y
+CONFIG_USB_STORAGE_BOT=n
+CONFIG_USB_STORAGE_UAS=n
+CONFIG_USB_STORAGE_MTP=n
+CONFIG_USB_SMARTCARD=n
+CONFIG_USB_AUDIO=n
+CONFIG_USB_SERIAL=n
+CONFIG_USB_NETWORK=n
+CONFIG_USB_BLUETOOTH=n
diff --git a/hw/vfio/Makefile.objs b/hw/vfio/Makefile.objs
index c3ab909..9e9fe59 100644
--- a/hw/vfio/Makefile.objs
+++ b/hw/vfio/Makefile.objs
@@ -1,4 +1,4 @@
-ifeq ($(CONFIG_LINUX), y)
+ifeq ($(CONFIG_LINUX)$(CONFIG_XEN), yn)
 obj-$(CONFIG_SOFTMMU) += common.o
 obj-$(CONFIG_PCI) += pci.o pci-quirks.o
 obj-$(CONFIG_VFIO_CCW) += ccw.o
diff --git a/hw/virtio/Makefile.objs b/hw/virtio/Makefile.objs
index 765d363..015fe60 100644
--- a/hw/virtio/Makefile.objs
+++ b/hw/virtio/Makefile.objs
@@ -11,5 +11,5 @@ obj-y += virtio-crypto.o
 obj-$(CONFIG_VIRTIO_PCI) += virtio-crypto-pci.o
 endif
 
-common-obj-$(call lnot,$(CONFIG_LINUX)) += vhost-stub.o
+common-obj-$(call lnot,$(CONFIG_VIRTIO)) += vhost-stub.o
 common-obj-$(CONFIG_ALL) += vhost-stub.o
diff --git a/stubs/Makefile.objs b/stubs/Makefile.objs
index 4a33495..22affa6 100644
--- a/stubs/Makefile.objs
+++ b/stubs/Makefile.objs
@@ -8,6 +8,7 @@ stub-obj-y += blockdev-close-all-bdrv-states.o
 stub-obj-y += clock-warp.o
 stub-obj-y += cpu-get-clock.o
 stub-obj-y += cpu-get-icount.o
+stub-obj-y += crypto.o
 stub-obj-y += dump.o
 stub-obj-y += error-printf.o
 stub-obj-y += fdset.o
diff --git a/stubs/crypto.c b/stubs/crypto.c
new file mode 100644
index 0000000..ced575f
--- /dev/null
+++ b/stubs/crypto.c
@@ -0,0 +1,223 @@
+#include "qemu/osdep.h"
+#include "qapi/error.h"
+#include "crypto/block.h"
+#include "crypto/secret.h"
+#include "crypto/cipher.h"
+#include "crypto/init.h"
+#include "crypto/tlssession.h"
+
+QCryptoBlock *qcrypto_block_open(QCryptoBlockOpenOptions *options,
+                                 const char *optprefix,
+                                 QCryptoBlockReadFunc readfunc,
+                                 void *opaque,
+                                 unsigned int flags,
+                                 Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return NULL;
+}
+
+QCryptoBlock *qcrypto_block_create(QCryptoBlockCreateOptions *options,
+                                   const char *optprefix,
+                                   QCryptoBlockInitFunc initfunc,
+                                   QCryptoBlockWriteFunc writefunc,
+                                   void *opaque,
+                                   Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return NULL;
+}
+
+int qcrypto_block_decrypt(QCryptoBlock *block,
+                          uint64_t startsector,
+                          uint8_t *buf,
+                          size_t len,
+                          Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return -1;
+}
+
+int qcrypto_block_encrypt(QCryptoBlock *block,
+                          uint64_t startsector,
+                          uint8_t *buf,
+                          size_t len,
+                          Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return -1;
+}
+
+void qcrypto_block_free(QCryptoBlock *block)
+{
+}
+
+uint64_t qcrypto_block_get_payload_offset(QCryptoBlock *block)
+{
+    return 0;
+}
+
+bool qcrypto_block_has_format(QCryptoBlockFormat format,
+                              const uint8_t *buf,
+                              size_t buflen)
+{
+    return false;
+}
+
+QCryptoBlockInfo *qcrypto_block_get_info(QCryptoBlock *block,
+                                         Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return NULL;
+}
+
+QCryptoTLSSession *qcrypto_tls_session_new(QCryptoTLSCreds *creds,
+                                           const char *hostname,
+                                           const char *aclname,
+                                           QCryptoTLSCredsEndpoint endpoint,
+                                           Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return NULL;
+}
+
+int qcrypto_tls_session_handshake(QCryptoTLSSession *sess,
+                                  Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return -1;
+}
+
+ssize_t qcrypto_tls_session_read(QCryptoTLSSession *sess,
+                                 char *buf,
+                                 size_t len)
+{
+    return -1;
+}
+
+ssize_t qcrypto_tls_session_write(QCryptoTLSSession *sess,
+                                  const char *buf,
+                                  size_t len)
+{
+    return -1;
+}
+
+QCryptoTLSSessionHandshakeStatus
+qcrypto_tls_session_get_handshake_status(QCryptoTLSSession *sess)
+{
+    return 0;
+}
+
+void qcrypto_tls_session_set_callbacks(QCryptoTLSSession *sess,
+                                       QCryptoTLSSessionWriteFunc writeFunc,
+                                       QCryptoTLSSessionReadFunc readFunc,
+                                       void *opaque)
+{
+}
+
+char *qcrypto_tls_session_get_peer_name(QCryptoTLSSession *sess)
+{
+    return NULL;
+}
+
+void qcrypto_tls_session_free(QCryptoTLSSession *sess)
+{
+}
+
+int qcrypto_tls_session_check_credentials(QCryptoTLSSession *sess,
+                                          Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return -1;
+}
+
+QCryptoCipher *qcrypto_cipher_new(QCryptoCipherAlgorithm alg,
+                                  QCryptoCipherMode mode,
+                                  const uint8_t *key, size_t nkey,
+                                  Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return NULL;
+}
+
+void qcrypto_cipher_free(QCryptoCipher *cipher)
+{
+}
+
+int qcrypto_cipher_encrypt(QCryptoCipher *cipher,
+                           const void *in,
+                           void *out,
+                           size_t len,
+                           Error **errp)
+{
+    error_setg_errno(errp, ENOSYS, "No crypto");
+    return -1;
+}
+
+bool qcrypto_cipher_supports(QCryptoCipherAlgorithm alg,
+                             QCryptoCipherMode mode)
+{
+    return false;
+}
+
+int qcrypto_init(Error **errp)
+{
+    return 0;
+}
+
+int qcrypto_secret_lookup(const char *secretid,
+                          uint8_t **data,
+                          size_t *datalen,
+                          Error **errp)
+{
+    Object *obj;
+    QCryptoSecret *secret;
+
+    obj = object_resolve_path_component(
+        object_get_objects_root(), secretid);
+    if (!obj) {
+        error_setg(errp, "No secret with id '%s'", secretid);
+        return -1;
+    }
+
+    secret = (QCryptoSecret *)
+        object_dynamic_cast(obj,
+                            TYPE_QCRYPTO_SECRET);
+    if (!secret) {
+        error_setg(errp, "Object with id '%s' is not a secret",
+                   secretid);
+        return -1;
+    }
+
+    if (!secret->rawdata) {
+        error_setg(errp, "Secret with id '%s' has no data",
+                   secretid);
+        return -1;
+    }
+
+    *data = g_new0(uint8_t, secret->rawlen + 1);
+    memcpy(*data, secret->rawdata, secret->rawlen);
+    (*data)[secret->rawlen] = '\0';
+    *datalen = secret->rawlen;
+
+    return 0;
+}
+
+char *qcrypto_secret_lookup_as_base64(const char *secretid,
+                                      Error **errp)
+{
+    uint8_t *data;
+    size_t datalen;
+    char *ret;
+
+    if (qcrypto_secret_lookup(secretid,
+                              &data,
+                              &datalen,
+                              errp) < 0) {
+        return NULL;
+    }
+
+    ret = g_base64_encode(data, datalen);
+    g_free(data);
+    return ret;
+}
